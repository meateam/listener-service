// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: producer/producer.proto

package producer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExchangeObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	RoutingKey string `protobuf:"bytes,3,opt,name=routingKey,proto3" json:"routingKey,omitempty"`
}

func (x *ExchangeObjectType) Reset() {
	*x = ExchangeObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_producer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeObjectType) ProtoMessage() {}

func (x *ExchangeObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_producer_producer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeObjectType.ProtoReflect.Descriptor instead.
func (*ExchangeObjectType) Descriptor() ([]byte, []int) {
	return file_producer_producer_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeObjectType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeObjectType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExchangeObjectType) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

type SendMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The msg that being sent.
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// Rabbit queue name
	Queue    string              `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Exchange *ExchangeObjectType `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *SendMsgRequest) Reset() {
	*x = SendMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_producer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRequest) ProtoMessage() {}

func (x *SendMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_producer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRequest.ProtoReflect.Descriptor instead.
func (*SendMsgRequest) Descriptor() ([]byte, []int) {
	return file_producer_producer_proto_rawDescGZIP(), []int{1}
}

func (x *SendMsgRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SendMsgRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *SendMsgRequest) GetExchange() *ExchangeObjectType {
	if x != nil {
		return x.Exchange
	}
	return nil
}

type SendMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendMsgResponse) Reset() {
	*x = SendMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_producer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResponse) ProtoMessage() {}

func (x *SendMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_producer_producer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResponse.ProtoReflect.Descriptor instead.
func (*SendMsgResponse) Descriptor() ([]byte, []int) {
	return file_producer_producer_proto_rawDescGZIP(), []int{2}
}

type SendPermissionDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fileID of the permission
	FileID string `protobuf:"bytes,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
}

func (x *SendPermissionDeleteRequest) Reset() {
	*x = SendPermissionDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_producer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPermissionDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPermissionDeleteRequest) ProtoMessage() {}

func (x *SendPermissionDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_producer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPermissionDeleteRequest.ProtoReflect.Descriptor instead.
func (*SendPermissionDeleteRequest) Descriptor() ([]byte, []int) {
	return file_producer_producer_proto_rawDescGZIP(), []int{3}
}

func (x *SendPermissionDeleteRequest) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

type SendContentChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fileID of the permission
	FileID string `protobuf:"bytes,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
}

func (x *SendContentChangeRequest) Reset() {
	*x = SendContentChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_producer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendContentChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendContentChangeRequest) ProtoMessage() {}

func (x *SendContentChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_producer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendContentChangeRequest.ProtoReflect.Descriptor instead.
func (*SendContentChangeRequest) Descriptor() ([]byte, []int) {
	return file_producer_producer_proto_rawDescGZIP(), []int{4}
}

func (x *SendContentChangeRequest) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

var File_producer_producer_proto protoreflect.FileDescriptor

var file_producer_producer_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x22, 0x72, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x22,
	0x32, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x32, 0x85, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_producer_producer_proto_rawDescOnce sync.Once
	file_producer_producer_proto_rawDescData = file_producer_producer_proto_rawDesc
)

func file_producer_producer_proto_rawDescGZIP() []byte {
	file_producer_producer_proto_rawDescOnce.Do(func() {
		file_producer_producer_proto_rawDescData = protoimpl.X.CompressGZIP(file_producer_producer_proto_rawDescData)
	})
	return file_producer_producer_proto_rawDescData
}

var file_producer_producer_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_producer_producer_proto_goTypes = []interface{}{
	(*ExchangeObjectType)(nil),          // 0: producer.ExchangeObjectType
	(*SendMsgRequest)(nil),              // 1: producer.SendMsgRequest
	(*SendMsgResponse)(nil),             // 2: producer.SendMsgResponse
	(*SendPermissionDeleteRequest)(nil), // 3: producer.SendPermissionDeleteRequest
	(*SendContentChangeRequest)(nil),    // 4: producer.SendContentChangeRequest
}
var file_producer_producer_proto_depIdxs = []int32{
	0, // 0: producer.SendMsgRequest.exchange:type_name -> producer.ExchangeObjectType
	1, // 1: producer.ProducerService.SendMsg:input_type -> producer.SendMsgRequest
	3, // 2: producer.ProducerService.SendPermissionDelete:input_type -> producer.SendPermissionDeleteRequest
	4, // 3: producer.ProducerService.SendContentChange:input_type -> producer.SendContentChangeRequest
	2, // 4: producer.ProducerService.SendMsg:output_type -> producer.SendMsgResponse
	2, // 5: producer.ProducerService.SendPermissionDelete:output_type -> producer.SendMsgResponse
	2, // 6: producer.ProducerService.SendContentChange:output_type -> producer.SendMsgResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_producer_producer_proto_init() }
func file_producer_producer_proto_init() {
	if File_producer_producer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_producer_producer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_producer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_producer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_producer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPermissionDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_producer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendContentChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_producer_producer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_producer_producer_proto_goTypes,
		DependencyIndexes: file_producer_producer_proto_depIdxs,
		MessageInfos:      file_producer_producer_proto_msgTypes,
	}.Build()
	File_producer_producer_proto = out.File
	file_producer_producer_proto_rawDesc = nil
	file_producer_producer_proto_goTypes = nil
	file_producer_producer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProducerServiceClient is the client API for ProducerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProducerServiceClient interface {
	// SendMsg sends msg to queue
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
	SendPermissionDelete(ctx context.Context, in *SendPermissionDeleteRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
	SendContentChange(ctx context.Context, in *SendContentChangeRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
}

type producerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProducerServiceClient(cc grpc.ClientConnInterface) ProducerServiceClient {
	return &producerServiceClient{cc}
}

func (c *producerServiceClient) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, "/producer.ProducerService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) SendPermissionDelete(ctx context.Context, in *SendPermissionDeleteRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, "/producer.ProducerService/SendPermissionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerServiceClient) SendContentChange(ctx context.Context, in *SendContentChangeRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, "/producer.ProducerService/SendContentChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProducerServiceServer is the server API for ProducerService service.
type ProducerServiceServer interface {
	// SendMsg sends msg to queue
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error)
	SendPermissionDelete(context.Context, *SendPermissionDeleteRequest) (*SendMsgResponse, error)
	SendContentChange(context.Context, *SendContentChangeRequest) (*SendMsgResponse, error)
}

// UnimplementedProducerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProducerServiceServer struct {
}

func (*UnimplementedProducerServiceServer) SendMsg(context.Context, *SendMsgRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (*UnimplementedProducerServiceServer) SendPermissionDelete(context.Context, *SendPermissionDeleteRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPermissionDelete not implemented")
}
func (*UnimplementedProducerServiceServer) SendContentChange(context.Context, *SendContentChangeRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContentChange not implemented")
}

func RegisterProducerServiceServer(s *grpc.Server, srv ProducerServiceServer) {
	s.RegisterService(&_ProducerService_serviceDesc, srv)
}

func _ProducerService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/producer.ProducerService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).SendMsg(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_SendPermissionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPermissionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).SendPermissionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/producer.ProducerService/SendPermissionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).SendPermissionDelete(ctx, req.(*SendPermissionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProducerService_SendContentChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContentChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServiceServer).SendContentChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/producer.ProducerService/SendContentChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServiceServer).SendContentChange(ctx, req.(*SendContentChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProducerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "producer.ProducerService",
	HandlerType: (*ProducerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _ProducerService_SendMsg_Handler,
		},
		{
			MethodName: "SendPermissionDelete",
			Handler:    _ProducerService_SendPermissionDelete_Handler,
		},
		{
			MethodName: "SendContentChange",
			Handler:    _ProducerService_SendContentChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "producer/producer.proto",
}
